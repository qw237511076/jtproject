<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="
	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
	http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.0.xsd">

    <!--1.开启包扫描-->
    <context:component-scan base-package="com.jt"/>

    <!--2.引用外部配置文件-->
    <!--<context:property-placeholder location="classpath:/property/jdbc.properties"/>-->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <list>
                <value>classpath:/property/jdbc.properties</value>
                <value>classpath:/property/imageUrl.properties</value>
            </list>
        </property>
    </bean>
    <!--3.配置数据源-->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource">
        <property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--4.开启事务策略-->
    <tx:annotation-driven/>
    <!--5.声明式事务处理 利用AOP原理实现
        AOP在不改变原有代码的前提下，对方法增强
    -->
    <!--5.1配置事务管理器 主要作用 事务提交/回滚 需要数据源-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <!--5.2 编辑事务通知类型 环绕通知-->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!--配置事务策略
            propagation="REQUIRED" 执行save方法时，必须添加一个事务
             propagation="SUPPORTS" 表示事务支持，原来有事务则添加事务

             事务回滚策略：
             1.运行时异常 事务自动回滚
             2.编译异常   事务不负责回滚
             rollback-for="" ：指定异常类型 回滚
             no-rollback-for=""  ：指定异常类型 不回滚
        -->
        <tx:attributes>
            <!--<tx:method name="save*" propagation="REQUIRED"/>-->
            <tx:method name="save*"/>
            <tx:method name="delete*"/>
            <tx:method name="update*"/>
            <tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" propagation="SUPPORTS" read-only="true"/>
        </tx:attributes>
    </tx:advice>

    <!--5.3 配置事务切面
        顺序：Content Model :(pointcut*,advisor*,aspect*
        表达式：
            execution(返回值类型 包名.类名.方法名(参数列表))
    -->
    <aop:config>
        <!--<aop:pointcut id="pc" expression="execution(* com.jt.manager.service..*.*(..))"/>-->
        <aop:pointcut id="pc" expression="execution(* com.jt.manager.service..*(..))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="pc"/>
    </aop:config>



</beans>